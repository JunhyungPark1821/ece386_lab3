/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 24.02.2025 15:51:36

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 7472;
#else
constexpr int kTensorArenaSize = 6448;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.045063376426696777, } };
const TfArray<1, int> quant0_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 50, 13, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { -1, 2800, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data3[3] = { 37, -122, 181, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const TfArray<1, float> quant3_scale = { 1, { 6.6311455157119781e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[3*2800] = { 
  49, 49, 18, 17, 46, 48, -32, 55, 52, 19, -68, -19, 44, 14, -25, 34, 39, 14, 12, -38, 7, 29, 55, 11, -79, 55, 52, -64, 1, 22, 16, 5, 39, 39, 17, 7, -12, -23, 8, -23, -1, -47, 43, 17, 19, -72, 19, -1, 20, 26, 13, -31, 19, -27, -4, -2, -49, -24, 3, 27, -16, -21, -1, -18, 23, 33, -11, 15, -8, 26, -11, -37, -24, 56, -3, 50, -16, -23, 25, -9, 38, -14, 22, -14, -37, 15, 20, -33, -22, 12, -36, 8, 3, -51, 0, 25, -14, 35, 15, -25, -7, 15, 2, -8, 18, -29, -40, -21, -4, -25, -36, 31, 30, 55, -9, -40, 30, 67, -63, 23, 73, -3, -74, -8, 10, 71, -34, 21, 9, 79, -1, -47, 45, -2, 25, 12, -16, -23, 54, -10, -10, -21, 16, 43, 1, 21, 12, 11, -5, -17, -15, 8, 20, 6, -16, 35, 22, 30, 39, -4, 47, 28, 27, -40, -39, 43, 37, 9, -28, -39, -78, 62, 14, 13, 61, -26, 17, -37, 29, 17, 33, 39, -20, -38, 38, 43, -2, 7, -67, 36, 31, -29, 33, -57, -24, -20, -70, 28, 23, 16, -22, 33, -52, -23, 36, 19, 19, 28, 36, 3, -26, -1, 20, -9, -10, -32, -9, -44, 59, 14, -46, -36, 12, 0, -11, -7, -30, 49, 40, 8, -78, 2, 4, -12, -17, -40, -3, 14, -61, -5, 5, 36, 11, -45, 47, 32, -25, 52, -40, 29, 35, -12, 37, -12, 10, -27, 37, -39, -44, 7, -40, -23, -6, 27, -4, -2, 9, -52, -59, -17, -46, 34, 14, 31, -15, -11, -24, -10, 18, -20, -32, -22, 18, -26, -29, 3, -7, -21, 9, 29, 7, -45, -22, 50, -10, 21, -34, -33, -17, 35, 12, 22, -11, -22, 48, 46, -14, -39, -12, -13, 44, 4, -34, 26, -16, -51, -14, 17, -5, -17, -18, -38, -6, 17, -17, -39, 19, 17, -8, -22, -8, -13, 0, -1, 7, -6, -22, -25, -99, -13, 6, 31, -46, -8, 82, -62, 10, 33, 19, 91, -21, -61, -41, -2, 61, -30, -34, 45, 12, 36, -15, -30, 0, -17, -6, -2, 9, 15, 19, -12, -30, 35, 33, 24, -52, 7, 4, -1, 5, 21, -37, 6, 26, -15, 29, -12, 4, -23, -9, 34, -32, 8, 16, 38, 3, 6, 27, 15, 4, -29, 38, 26, -41, -86, -12, 9, -32, 16, -28, -10, 8, -2, 35, 24, 33, -30, 37, 24, 29, -44, -6, 2, 44, 16, -32, -37, 5, 62, 26, -40, 35, 53, 27, -14, -31, -18, 2, -1, -10, -6, 8, -13, -22, -28, 10, -40, 38, -34, 18, -21, -41, -15, -29, 25, -55, -46, 14, 11, 28, -23, 10, 14, -2, -19, 2, 77, 17, -3, -16, 36, -32, 40, -3, 17, -1, 25, -6, 26, -5, 25, 3, 9, -59, -12, -21, 25, 1, 13, -27, -35, 31, -11, -27, 3, -57, -17, -24, 6, 24, -8, 13, 1, 3, 28, 12, 45, 1, -41, -29, 33, -25, 27, -23, 72, 19, -32, 39, -6, -43, 1, -37, -50, 28, 36, 37, 9, 15, 13, 6, -25, 24, -24, 54, -9, -30, -13, -30, 0, -32, 32, 28, -15, -27, 3, 32, -2, -5, -19, 5, -1, -59, -15, 16, 21, 24, -11, -32, 31, 38, -10, 18, -2, -40, -30, -13, 28, -11, -8, -2, -21, 7, -39, 11, 39, 3, 2, 11, -10, -19, -3, 58, -8, -29, 21, 14, 2, 52, 19, -44, 19, 6, -6, 15, -2, -15, -5, -2, 12, -21, -22, 2, -10, -50, -26, -24, -6, -40, 32, 26, 44, 16, -37, 16, 24, 19, -12, -40, 49, -5, -35, -59, 28, -23, 17, 0, 50, -32, -2, -18, -18, -7, -14, -42, -44, -23, 2, 30, 13, -22, 5, -4, -10, 2, -37, -10, -21, -4, -23, -1, -89, -20, -22, 45, 33, -29, 8, 31, -9, 13, 4, 7, -54, 45, -31, -26, 36, 11, 10, -23, -32, -42, -21, 14, 39, 13, -37, 21, 35, -55, -27, -47, -34, 45, 12, 9, 14, 7, -11, -15, -11, -18, 6, 10, 28, -22, -6, -16, 13, 34, -11, -59, -22, 21, -5, 5, -26, 10, -2, -57, 44, 21, -16, 15, -5, -41, -24, -21, 44, 15, 64, -24, 23, -27, -52, 10, -16, 4, 23, -20, -22, -7, 43, -31, -32, -5, -27, 22, -15, -16, -21, 12, 5, 24, -16, 14, -20, 23, 41, -14, 32, -35, 7, 21, 31, -7, -57, -5, 19, 25, -22, -12, 5, -14, -8, 10, 49, 4, 7, -26, 7, -14, 4, -17, 23, 21, -17, -2, -49, 33, 2, 21, 38, 20, 6, 32, 68, 8, -60, -13, 66, -47, -3, -2, -71, -43, -1, 2, -1, 13, -49, 46, -2, -38, 1, 0, 50, -43, -22, -23, 2, 11, 3, -30, 41, -13, 6, -18, 29, 26, -6, -53, 24, -5, 45, 17, 21, 31, -78, -16, -6, -12, 3, 0, 47, -27, -21, -11, -16, 0, 1, 9, -27, 23, 26, -4, -6, 32, 20, 14, 7, -11, -6, 1, -3, 58, -6, 20, -28, -79, -14, 41, 56, -9, -15, 25, 8, -6, -25, -32, -8, 32, 25, -17, 3, -4, -53, 8, -15, 37, -5, 11, 32, -18, -8, 14, 18, 27, 31, -2, -8, 8, -4, 25, 3, -6, 1, 2, 7, -30, -81, -55, 64, -38, 31, -10, -48, -57, 0, -39, -33, -33, -32, 13, -1, -57, -43, -9, 42, -30, -41, 5, -38, -13, -33, -3, 78, -4, -70, 13, 14, 58, -39, -30, 2, 20, 18, -34, 8, -11, -59, -23, 21, 20, 23, 4, -48, -44, -10, -54, -46, -33, -4, 5, -42, 24, -25, -39, -67, -38, 12, 12, 35, -9, -33, -5, 32, 10, -24, 4, -35, -2, -11, 24, 45, -4, 34, 28, -19, 19, -8, 28, -8, 3, 6, -9, -32, 16, 24, 15, 29, -6, 2, -7, -27, -11, -5, -25, 45, -14, 62, 15, -55, 21, -9, -9, 44, 13, -23, -31, -12, 24, -57, -76, 21, 2, -28, -53, 43, -28, 0, -32, -15, 21, -26, 7, -24, -69, -14, -19, -9, -53, -4, 16, -58, -70, 2, 0, 43, -41, -24, -22, -3, 45, -25, -59, 3, -14, -3, 3, -1, -54, -59, -34, 5, -3, 2, 25, -6, -20, -23, 11, -11, -34, -3, -20, -28, 50, 11, 3, -36, 2, 7, 18, -3, -24, -14, -21, 15, 45, -31, -4, 19, -35, 27, -1, 12, -8, -12, -5, 17, -16, 15, 34, -19, 42, -13, 27, 44, -33, 6, 66, 37, -39, 20, -3, 43, -5, -29, -54, -8, -10, -22, 18, 59, 41, 48, 62, -13, 3, -32, -9, 25, 63, -59, -58, -3, -25, 12, -84, -8, -3, 56, -50, -66, 45, 6, 1, 15, -57, -25, -31, -42, -5, -15, -17, -38, -7, 16, -17, -7, -15, -42, -12, 37, 38, -22, 49, 16, -6, -17, 17, 12, -51, -41, 7, -15, -13, 62, 12, 0, -9, -14, -7, -15, 57, -12, -7, 4, 16, -35, -15, 15, -5, 13, 5, -50, -30, -16, -16, -37, 23, -7, -20, 4, -25, 40, 13, 32, 31, 25, -12, -60, -6, -5, 6, -62, -70, 20, -4, -48, -16, -7, 3, 12, -8, 32, 48, -3, -8, -39, -17, -57, 37, -22, -33, 1, -12, -55, -43, -65, -24, 43, -19, -15, 39, -40, 4, 29, -50, 11, -6, -14, 19, 46, -28, 16, 15, -27, 12, -21, -85, -32, -60, 24, 6, -10, 7, -19, -24, -38, -5, 12, -3, -61, -6, 24, -23, 5, -55, 46, -44, -23, -9, -7, 32, -44, -10, 35, -7, -4, 44, 1, 26, -49, -7, -15, 14, -50, 11, -28, -25, -49, -41, 17, -17, 34, 4, 12, -62, -14, -13, 0, 31, -61, 21, -5, 2, -19, -26, 32, -12, 3, -27, 36, -14, -33, 32, 2, 1, 3, 32, -11, 19, 48, -51, 44, -4, 57, -23, 11, -41, -31, 31, 5, 6, -33, -21, -29, 39, -21, -50, -47, -34, 24, 6, 28, 30, -59, 2, 17, 2, -21, -38, -30, 31, 43, -45, 13, 25, -21, -7, 0, 1, -20, -54, 21, 3, 11, -38, 21, 18, -48, -5, 23, -9, -53, 24, -6, 17, -4, -52, 24, -17, 1, -32, 21, 20, -46, 33, -10, 19, 33, 50, 58, -24, -30, -26, 17, 1, -19, -16, -9, 20, -26, -41, -45, 12, 16, 3, 27, 18, -11, -25, -38, 33, -31, -40, 13, -16, -51, -6, -22, 30, 3, -24, 59, -24, -9, 26, -7, -11, 23, -14, -33, -10, -17, -36, 11, -7, 20, 35, 38, -39, -21, 105, -40, 26, -24, -7, -22, -4, -12, 0, 43, -41, 75, 1, 7, -22, -51, -12, 50, -6, -25, -31, -59, -26, -77, 4, 12, 12, -51, -25, -41, -30, -44, 6, -7, -44, -1, -21, -31, -16, -13, 11, 49, 5, -10, -13, -19, 25, 14, -65, 62, -2, 32, -4, -38, -13, -25, -36, 6, -1, -74, 3, -6, 24, -12, -34, -3, -15, -18, 6, 37, -8, -9, -7, 16, 16, 1, 10, -35, 21, 11, -2, -17, -4, 2, 13, 24, 32, 16, 20, 22, 42, 43, -4, 11, 11, 5, -14, -40, -27, 1, -9, 21, -19, -18, -7, -2, 25, -9, -2, -3, -20, 30, 39, -1, -6, -14, 16, -26, -41, -6, 4, 36, 3, 1, 24, -9, 14, -30, -7, 25, -51, -52, -33, -72, -67, 33, -19, 3, -27, -65, -24, -28, -33, -23, -17, -4, -27, -18, -41, -19, 20, -4, -1, -63, -49, -50, -16, 37, 35, -14, 8, 37, -47, 20, -1, -7, 14, 4, -6, 38, -1, -5, -2, -46, 35, -12, -23, -13, -40, 0, -28, -47, -8, 5, -5, 23, -10, -14, 1, -44, 26, 0, -32, -22, -11, 16, -16, 2, 0, -12, 2, 35, -20, -27, 14, -25, -8, 4, 30, 61, -2, -52, 1, 37, 33, 15, 12, -31, -28, 52, -27, -7, 2, 3, 24, 22, 56, 17, -3, 54, 25, -41, -15, 30, 21, 15, -11, -21, 4, -39, -40, 15, -5, -1, -21, -70, -45, -7, -25, 1, -10, -28, -11, 18, -31, -33, 47, 3, -43, -1, -26, 19, -57, 54, 18, 60, -31, -22, 13, -5, 49, 3, -43, -21, -9, -28, -33, -9, 44, 7, 4, 10, 18, 1, 8, 14, 22, -29, -14, 16, -30, 0, -9, -3, -52, 55, -11, -20, 4, -61, -3, -13, 5, -15, -5, 38, 9, 8, -35, 20, -8, 61, -3, -1, 22, 19, -1, -48, 12, 9, 28, 0, -3, -21, -21, -8, 67, 4, 17, 12, -2, 0, 25, 19, 39, -8, 17, -12, -10, 22, -33, 3, -15, 14, -11, -44, -23, 18, 19, -25, 29, -41, -7, 32, 3, -29, -32, -32, -35, 37, -8, 21, 31, -46, 8, 7, -20, -22, 31, 10, -8, 14, -14, -60, -9, 14, 7, 83, -1, -3, 27, 37, -21, 11, 79, -12, -15, -44, -19, -26, 34, -10, -9, 37, 3, 13, 28, -9, -5, -58, 56, 64, -27, 18, -39, -6, 26, -3, -27, 25, 21, -34, 40, 1, -36, -50, 4, 56, -6, -5, -17, -33, 12, -45, 27, 76, -19, -17, 13, 33, 11, 20, 10, 26, 9, 10, -16, 74, 17, -37, 46, 31, 30, 18, 9, 9, 26, -8, 5, 11, -75, -12, 1, 19, 15, 6, -24, 40, -39, 53, 1, -16, 35, -34, -21, 20, -62, -4, -20, 5, -72, 53, -21, -6, -17, -8, -42, 8, -52, -25, 5, 64, 0, 12, -37, -3, 7, -36, 8, -7, -11, -21, 17, 18, -15, -23, -30, 9, 29, 21, 32, -55, 66, 36, -10, 28, -23, 4, -2, 47, -28, -71, 3, 18, -61, 21, -14, 19, -5, -29, -13, 41, -8, -23, 1, -6, 0, -6, -9, -13, 18, -2, 19, -41, 29, 17, -13, 60, 12, -55, 7, 11, -7, 20, 33, 16, 29, -17, 26, 15, -19, 19, 29, -2, -30, -23, 20, 38, 0, -25, 45, 15, -7, -10, -4, 24, -17, -11, -30, 45, 28, 33, 22, 12, 16, -15, 18, 31, -15, -5, -13, -3, -30, 72, -4, 37, 10, -24, 8, 72, 3, -38, 9, 24, 21, 24, -18, 19, 40, 34, -12, -40, 0, -19, 14, -4, 3, -16, -3, 5, -24, -18, 13, 12, 8, 7, -13, -25, -37, -1, -4, 47, -16, -36, -18, 17, -21, -12, -14, -27, -10, -48, -3, -8, -17, 8, 25, 13, 9, -30, 1, 23, 16, -21, -9, -27, 11, -24, 5, -45, 39, 2, -15, -24, 43, 23, -66, -11, 43, 6, 43, -57, -26, 26, -9, -10, -12, 7, -21, -30, 27, -17, 40, 3, -16, 3, -28, 16, -15, -30, -8, -16, 4, -24, -19, 20, 53, -76, -16, 22, -57, -3, -25, 32, 35, 0, 5, 18, -21, -7, -1, -18, -9, -19, 14, 30, 41, 10, -9, -14, -68, -59, 0, 8, 5, -21, 15, -33, -11, -3, -41, 13, 30, -16, 6, 20, -19, -50, -27, 17, 36, -52, 48, 34, -36, -28, -14, -4, -20, -60, -24, -18, -58, 1, 15, 52, -17, -25, 17, 7, 49, -45, -13, 23, -39, 15, -17, 11, -35, 46, -20, -20, 35, 42, 53, -8, -34, -24, -8, -13, 11, -11, -5, -52, 23, -33, -7, -1, 10, -21, 1, -11, -17, -38, -39, -1, 8, -34, -8, 13, -28, 23, -7, 18, 17, 28, 30, 22, -2, -28, -7, 20, -24, -8, 5, 41, -48, -15, -21, -12, 16, 4, 23, 50, -53, -28, 1, 42, 15, 11, -12, -71, -61, -59, 0, 24, 3, -27, 22, -9, 18, -25, 4, 9, 11, -2, 3, -4, 16, -45, -31, 34, 26, -7, 29, 44, 32, -27, 23, -21, -3, 14, 11, -1, -53, 16, -45, 24, 44, -22, 3, -10, 46, -1, -26, -3, -17, -3, -48, -13, -3, 11, 27, 0, 16, 18, 27, 4, -3, 1, -13, -25, 38, -1, -50, 38, 0, 3, 4, 29, -10, 9, 14, -25, 15, 4, -17, -22, 13, 13, 47, 20, 21, 25, 15, -23, 30, 5, 26, 39, 4, -18, 2, 22, -27, 21, -16, 13, 92, 66, -8, -45, -16, 23, 40, -2, 4, -23, -26, 42, 30, -21, -30, -7, 9, 17, 9, -33, 25, 0, 27, 33, 8, 2, -23, 41, 52, -1, -8, 1, 16, 27, -15, 10, 19, 3, 13, -11, 2, -39, 36, 34, 8, 24, -5, 14, -12, 34, -38, 47, 36, -4, 3, 22, 7, -16, -22, 56, -47, -11, 31, -23, -31, 49, 28, 48, 29, -1, -2, 37, 8, -52, 26, 3, -44, 64, -18, 1, 33, -24, -5, 61, 28, -13, 33, -1, 14, -19, 21, -35, 22, -9, 23, -65, 11, 5, 17, -12, 29, 31, 38, 86, 65, -11, 14, 24, -26, -10, 5, 53, 28, -17, 4, -22, 44, 69, 27, 26, 7, -59, -28, 8, 12, -7, -21, -4, 48, -20, -3, 23, 18, 4, 15, 41, 23, -34, -37, -10, 4, -16, -10, 24, 38, 26, -14, 9, 46, -10, -4, 3, 42, -35, -5, 3, -34, 7, -21, -10, 16, 25, -60, 9, 62, -36, 35, 101, -28, -28, 22, 27, -32, -19, 4, -37, -37, 25, 14, 21, 8, -3, 37, -10, 19, -56, 11, 39, -6, 13, -47, -37, 11, -69, 40, 7, -3, 19, 17, 15, 8, -28, 58, 45, 26, 34, -29, 5, 4, -13, 25, 27, 27, -3, -18, 82, -27, -12, 49, 81, -45, 5, -30, 7, -24, 48, 6, -6, 0, 20, 35, 33, 7, -20, 6, 27, 99, -5, -12, 6, 76, -10, 9, 0, 11, 20, 34, 2, 39, -18, -18, 25, -7, -30, 7, -54, -32, 41, -8, -13, 81, -40, 7, -41, 31, 9, -37, 9, -16, -10, 20, 16, -6, 64, -59, -16, 34, -28, 58, 0, -13, -14, -8, 20, 16, -11, 40, 40, -54, 18, 27, 9, 13, -22, 31, 34, -2, 16, -27, 8, 35, -35, -26, 19, -40, 20, 79, -8, 6, -5, 11, 5, 33, -31, 39, 11, 43, 25, -1, 7, 21, -5, 33, -18, 60, -10, 45, 109, -75, 15, 24, 67, -13, 55, 3, 55, 92, -4, -21, 1, -12, 68, 44, 57, 32, -60, 87, 2, 24, -31, -7, -15, 48, -92, 54, -11, 69, 50, 6, 33, 50, -26, -38, -41, 64, 18, -45, 16, -34, 7, -10, -12, 5, -1, 29, 14, -24, 1, -58, -1, 63, 7, -31, -16, -2, 60, -24, -33, 14, 26, -2, 40, -6, 13, 8, 3, 11, 7, -1, 45, 36, 84, 29, 11, 34, -28, 12, -12, 19, -25, 33, 26, -16, 22, -31, 4, 0, 35, 21, 35, -11, -20, 16, 25, 33, -16, -19, 33, -28, -8, 6, -54, 20, 51, -14, 74, 37, 9, 
  -36, -82, 8, -63, -60, -61, 22, -88, -58, -2, 28, 8, -34, -5, -16, -43, -36, -15, -16, 19, -46, -3, -47, -34, 7, -61, -19, 36, 0, -42, -14, -38, 5, -24, -33, -12, 5, 8, -64, 27, -23, 2, -53, -17, 0, 15, -40, 26, 14, 3, -12, -35, -5, 42, -19, -32, 24, 17, -12, -16, -36, 31, 13, 11, 20, 6, 34, 16, 19, -10, 36, -4, 31, -63, -43, -13, 16, 40, -32, 14, -32, -4, 14, -46, 20, 5, 0, 34, 2, 10, 27, -42, -3, 58, 16, -27, 20, -9, -26, 58, -18, -8, -47, 7, 0, -36, 5, 23, 8, -7, 19, -25, -42, -29, 17, -14, -60, -89, 41, -22, -120, -23, 51, -29, -25, -61, 23, -53, -7, -83, -21, 6, -43, -36, -29, -69, -4, -4, -61, 33, 19, -5, -1, -77, 5, 2, 9, 11, 13, 2, -11, -31, -27, -55, -56, -47, -18, -43, -18, 30, -6, -28, -36, -1, 43, -41, 16, -22, -9, 48, 34, -5, -21, -8, -18, -4, -10, 30, -32, 13, -31, -19, 39, 25, -8, -43, -51, 0, 49, -6, -26, 48, -5, 59, 38, -40, 50, -24, -32, 21, -32, -27, 58, 1, -15, 0, 18, -17, -19, -25, 9, 32, -53, -34, -20, 10, 29, -7, -62, 10, 50, 47, 11, -27, -14, -2, 30, -55, -60, -22, 82, -39, 23, -1, -29, 16, 5, -32, 41, -51, -4, -39, -32, 14, -53, -33, 30, -34, -5, -50, -39, 62, -27, 37, -30, -20, -4, 19, 41, 6, 8, 4, 1, -16, -10, -55, -39, 58, 58, 20, 41, -11, -5, -19, 32, -48, 22, -4, 14, -19, -12, 21, -20, 1, -4, 11, 0, -20, 3, -20, -6, 27, -14, -63, 15, -22, 50, -13, -48, -45, 0, -31, 0, 40, -35, -23, 14, -41, 4, 17, -21, -14, -18, -12, 27, 13, 11, -60, 2, 32, 47, 31, -14, 9, 24, 37, -30, 4, 13, 21, -1, -2, 10, 8, 2, -28, 7, -30, 92, -30, -32, -43, 56, 5, -90, 33, -1, -18, -36, -120, 39, 26, 17, -29, -49, -3, 38, -27, -1, -33, -7, 29, 7, 24, 0, 17, -13, -14, -23, 43, 52, -24, -4, 3, 29, 11, 14, -10, -58, 17, 32, 25, -44, 29, -31, -5, -3, -35, 36, -23, 5, -17, -30, -34, -12, -10, -15, -32, 25, -4, -23, -11, 7, 49, 3, -30, 48, -12, 46, 29, -43, 13, -9, -23, -18, 33, 2, -29, -32, -5, 1, 15, -22, 5, -25, 38, 34, -36, -51, 33, -19, -62, -11, 20, 13, 5, -32, 26, -6, 19, 25, -27, -12, 11, 17, 50, -33, -5, -45, 38, 57, 0, 15, -61, 24, 14, -65, -24, -10, 5, 2, -51, 14, -2, 11, -99, -6, 5, -3, -24, 20, -32, -6, -8, 5, -41, -10, 2, 15, -1, -20, 7, 72, -6, -16, -25, -10, -15, 5, 14, -48, 32, 39, 20, 47, 3, 5, -2, -42, -22, 31, 4, -8, -17, -22, -55, -4, 65, 30, -19, 35, -53, 15, -24, -24, 37, -63, 26, 46, 6, 25, 32, -19, -52, -13, -6, -26, -11, 2, 8, -21, -5, -38, 1, 47, 24, -13, -25, 58, -69, -24, 32, 72, 20, -34, -7, -5, 25, -1, -4, 55, 27, -17, -19, -40, 16, -13, -13, -28, -6, -30, 11, 28, -13, 28, -31, 20, 28, -9, 21, -14, 46, -10, -25, -23, -40, -29, -30, 7, -7, -53, 7, 29, -19, -17, 3, -52, -21, 58, 0, 17, -1, -27, 22, 45, 5, -41, 2, -16, -3, 27, 18, 27, 35, -6, -13, 6, -35, -12, -29, -3, 3, -4, -9, 4, -14, 40, -37, 3, 64, 21, 5, -19, -17, 21, -3, 3, -2, 37, 20, -10, 10, -13, 24, 3, -6, -35, -17, 11, 13, 21, -4, 4, -11, -37, 29, 6, 4, 0, 60, -3, -6, -35, -43, 19, -9, -33, 9, -14, 8, 29, 32, -20, 17, 29, -48, -31, -24, 27, 21, 57, 8, -26, -53, -3, 37, -3, -43, 48, 17, 44, 19, -3, -12, 1, -9, -4, -21, -18, -51, 21, -12, -22, -29, -3, -4, -13, -2, -34, 14, 40, 23, -37, -39, -16, 39, 29, -2, 32, -9, -47, -1, -1, -2, 5, 10, 23, -44, 7, -60, -9, -21, -8, 19, 18, 21, -27, -6, 34, 1, -11, -30, 27, 10, -26, 3, -6, 11, -7, -20, 4, -11, -16, 10, -32, 9, -68, -69, -13, -20, 34, -25, -21, -14, 16, 38, -21, -47, -33, 20, -2, -18, 39, -14, -2, -67, 31, 11, 8, -5, 2, -9, -29, 7, 8, 20, 0, 6, -61, -7, -9, -55, -16, -20, -28, -79, -22, 47, 23, -40, 25, 19, 31, 73, 23, -18, -11, -15, -7, -4, -57, 33, 17, 6, -2, -22, 7, -7, 24, -6, 10, 1, 17, -36, -16, -6, 26, -23, -17, 1, 17, -12, 29, -42, 1, -36, -5, 50, 22, -14, -6, -2, -35, -34, 14, -10, -7, 15, -22, 5, -2, 41, 34, 1, -10, -3, -2, -13, -12, 10, -40, -24, -3, -13, -56, -10, -24, 32, 27, 23, -20, 4, -17, 12, -11, -5, 8, 15, -3, -1, -34, 10, 10, -16, -1, 14, 33, 16, -59, -7, 0, -31, -2, 12, -16, -27, -48, 2, 12, -34, -13, 2, -42, -2, 3, 7, -17, -25, 44, 40, 34, -69, 48, -29, 25, 37, 62, 16, 21, 52, 49, 13, -28, -3, 55, 37, 0, -11, 33, 12, 2, 42, 36, 35, 11, -37, 1, 45, -12, -10, -38, 28, 33, 5, -21, -5, 12, -1, 17, 70, 18, -11, -27, -26, 2, 14, 22, 4, 37, 21, -11, 4, -10, 42, -50, 27, -4, 39, 6, 20, -1, 4, -30, -4, -9, 18, -5, 2, -22, 20, -18, 12, -15, -15, 8, -52, -17, 19, 6, 10, -43, -24, -18, -18, -18, 5, 2, -35, 9, -31, 19, -8, 28, 14, 26, -10, 31, -36, -12, -40, -3, 53, -19, 9, 2, -28, 6, -8, 25, -38, -30, 37, 25, -21, -22, 25, 56, -20, 29, -12, 24, 4, -2, -6, -7, 20, 53, 39, 27, 32, 5, 0, -4, 32, 71, -5, 10, -21, 21, 10, -7, -37, -4, -2, 36, 6, -4, -24, 36, -13, -15, 17, 29, -34, -6, -6, -19, 3, 33, -5, -17, 4, 10, -2, 0, 20, -1, 7, -15, 20, -15, 8, -8, 20, -27, -19, 2, -3, -16, 10, -29, -27, 3, 3, -14, -14, -3, -7, 2, -33, -3, -24, -25, 16, -20, 0, -28, -68, 8, -3, -35, -35, 13, -26, 9, -66, 6, 16, 34, 4, 39, 8, -41, -49, -40, -55, -74, 28, 7, -16, 0, -36, -42, 25, 53, -20, 32, 5, 42, 28, 1, -30, 26, 28, 2, 14, -15, -5, 30, 36, -10, 41, 25, 8, 9, 36, 16, -7, 13, 12, -1, 32, 1, -39, -48, 40, -41, -28, -2, -17, 24, -10, 35, 14, -11, -1, 8, -35, -2, 9, 1, 5, -4, 6, -64, -7, -1, -15, -17, 48, 20, -6, -16, -15, 21, 27, 6, -9, 24, 37, -21, -22, 20, -15, 55, -12, -34, -25, -25, -26, 17, 43, 8, -14, 0, 45, 59, 1, -6, 58, -4, 3, -53, -7, 8, -19, -45, -18, 19, 18, 27, 84, -32, 29, -6, 13, 12, 10, 41, 43, -2, -67, -5, 4, -46, 34, -1, -50, 65, -11, -2, 21, -40, -52, 29, -38, -13, 32, 12, 3, 50, 10, 20, -45, 0, 2, -2, 17, 26, 29, 21, -54, -15, 65, -15, -20, 32, 6, 16, -33, 10, 22, 15, 17, -3, 31, 8, -62, 12, -29, -40, 32, -43, 32, 25, 17, -14, 16, 0, 6, -22, 63, 2, -21, 24, -61, -9, -10, 32, -17, 16, 13, -40, 44, -4, 9, -18, 16, 12, -27, 20, -19, -1, -34, 11, -11, -4, 4, -44, 28, -38, -7, -65, -45, 48, -33, -13, -39, -10, -35, 28, 25, -25, 41, -23, 3, 3, 45, -37, 14, 44, 27, -13, -29, -23, -19, -47, 65, 36, -12, 29, 5, 24, 68, -17, -30, 14, -8, -27, -5, 3, -17, 20, -2, 49, -26, 22, -8, 29, -9, 19, 31, 16, -11, -1, 35, -1, -1, 18, -13, 20, -44, 1, -34, 13, -28, 17, 46, -19, -37, -18, -49, -45, -77, 41, 35, 30, -7, -56, 4, 19, -37, -6, 33, 6, -8, -26, -4, -14, -41, -29, 16, 15, 59, -77, 20, 21, -18, -29, 46, 9, 50, -24, -19, 5, -33, 26, -26, -4, 17, 3, 21, -15, 28, 24, -32, 45, -3, -15, 10, -17, -30, 22, 20, -109, 30, 7, 4, -20, 10, 2, -5, 8, -91, 32, -47, -7, 17, -3, 50, 43, -44, 12, 40, 24, 55, 33, 58, 0, 2, -5, 11, 22, 55, 37, 16, -23, 6, -6, -3, 4, 21, -2, 22, 3, -42, -23, 20, 34, 24, -1, -18, 47, -36, -7, -24, -25, 37, 2, 27, 23, -22, -13, 46, 26, -9, 8, -17, 1, 11, 9, 17, -3, -15, 19, 26, -19, -10, -7, -24, -8, 3, -16, -30, -12, 15, 14, -16, -5, -12, -19, 0, -11, -1, -29, -49, 13, 30, -31, 4, 30, 11, -13, -10, -6, -28, 13, 3, 14, 20, -41, -8, 5, 23, 43, -3, -29, -19, -7, 12, -15, 29, 22, 7, -14, -54, 4, 8, -29, 0, -9, 36, -2, -21, 36, 40, 42, 94, 64, -29, 2, 12, -3, 26, 23, 56, -5, -6, 27, 18, -16, 9, 30, 15, -23, -24, -4, 72, 17, 61, 30, 0, -21, 5, 14, -26, 49, -33, -5, -24, -41, -8, 3, -22, 19, -28, 37, 61, -11, 9, -6, -3, 33, 1, 2, 33, 3, 37, -27, -4, 1, 9, 3, 41, -24, -11, -6, 49, -17, -23, 11, -7, -4, -8, -14, -15, -18, 0, -1, 4, -3, -37, -1, -32, -3, 47, -3, -81, -15, -40, 3, 50, 3, -21, 8, 7, 0, -12, -32, -32, -58, -11, -19, -27, -27, 21, -7, -7, 3, -25, -26, 12, 1, 31, 17, -21, 4, -2, 27, 96, 30, -9, -5, -26, 1, 5, 33, 43, 8, 11, -63, 5, 4, -9, 3, -35, 40, -39, -24, -62, 15, 34, 9, 25, -4, -5, 12, 8, 16, 3, 15, -10, -41, -7, 8, 25, 25, -17, 7, -26, -2, 22, -1, -18, 23, -4, 1, 2, 21, -43, -21, 26, -38, 55, 35, 22, -16, -27, -27, -34, -20, -12, 13, 2, 11, -21, 22, -15, -21, 9, -5, 62, -30, -60, -22, -13, 10, 1, 11, 26, -72, 5, 4, -38, -26, -5, -2, 3, -16, -25, -2, 31, 14, -4, 34, 0, -16, -23, -21, 49, 32, -10, -22, 26, -20, 17, 6, -24, 4, 27, 7, 62, 86, -32, 10, -41, -38, 46, 4, 3, 1, -2, -15, -15, -5, -10, 28, 8, 5, -43, 9, -62, -25, 23, -31, -21, 30, -3, -51, -15, 2, 17, 9, -3, -6, -15, 15, -51, 37, -42, -18, 28, 19, 29, -50, -57, -10, -41, 38, -11, -19, 25, 7, -25, -35, 1, -13, -3, 9, -7, -14, -29, -20, -3, -9, 18, -39, 58, -7, -76, 18, -9, -2, -23, -51, -25, -38, -34, 0, -9, 3, -78, -44, 16, -26, -8, -32, -7, -3, -4, -30, -13, -20, 15, 27, -19, -10, -18, -2, -17, 34, -31, 12, -56, -5, 26, -50, 9, 26, -31, 73, -10, 20, 29, 79, -37, 22, -3, 36, 12, 42, 32, 30, 3, -39, -46, -14, -31, 5, -25, -2, 50, 16, -13, 28, 30, -10, -25, 25, -7, 31, -21, -34, -39, -23, -4, -82, -26, 25, -10, 37, -25, -6, -34, 31, 40, -27, 5, 16, -32, 19, -30, 5, 52, -21, -32, -8, 3, 2, -31, 8, -25, 1, 30, -24, -16, -24, 43, -15, 14, 22, -51, 19, 16, -7, -18, -26, -35, -54, -32, -15, 8, -45, -18, 51, -18, -37, -1, -3, 10, -5, -39, -10, -12, -11, 20, -38, -12, -4, -24, -5, -2, 54, -5, -14, -45, -10, 23, 11, 8, -15, -33, 35, -4, -7, 4, 22, -98, 0, -26, 6, 23, 23, -19, -1, -13, 5, -43, -40, -17, 4, -38, -24, 19, 11, 31, 13, 40, -4, 44, 35, -17, -3, -10, 27, 9, -4, -35, -25, 24, 13, -5, 59, -23, 7, -18, 8, 17, 4, 17, 17, 23, 16, 17, 27, 31, -26, 15, 9, -2, -2, 6, 6, -2, -28, -1, -25, 12, -24, 39, -4, 20, -31, 20, 12, -18, 22, 16, -15, -22, 59, 23, -28, -15, -35, -34, -5, -42, 8, 13, 3, 6, 10, 28, 18, -33, -29, 6, 20, 3, -4, -25, 23, 49, 8, 34, 31, 21, 29, -4, -30, 72, -1, -29, 63, -3, -25, 9, 11, -50, 20, -28, 36, 8, -4, 20, 32, 14, -13, -23, -32, 5, 10, 45, 52, 28, 28, 7, 15, 50, 9, 44, 7, 14, 16, -24, -11, 2, -11, -19, -7, 46, 10, -24, 14, 0, -31, -17, 20, 14, 35, 5, 18, 55, 35, 5, 8, 45, -51, -51, 18, -9, -7, -13, -46, 13, -21, -8, 3, 7, -26, 28, 14, -8, -3, 14, -31, -19, -15, -2, 41, -15, -2, 16, -24, 34, -21, -8, -28, 24, 22, -3, -32, 11, 43, 5, 0, -21, 62, 33, 13, 19, -33, -20, 14, -1, 9, -3, 6, -35, -21, -18, 16, 47, 18, -18, 15, -6, 6, -17, 50, 15, 31, 20, 9, 4, -30, -39, 44, 4, -5, -32, -3, -9, 19, 76, 43, 41, 13, 11, 1, 42, -18, 23, 12, 13, -22, 7, 0, 5, 13, -22, 16, 40, 6, -20, 6, 13, -8, -16, 3, 27, -9, 49, -25, 1, 24, -2, 3, -5, 2, -15, -42, 16, 14, -9, -19, -4, 15, 12, -8, -14, 5, -4, -11, 40, -16, -9, -30, -36, 11, -14, 11, 0, 1, 31, -84, 8, 7, -26, -39, 2, 10, 4, -17, 9, -4, 35, 11, -62, 5, 52, -14, -33, -43, -43, -21, 0, -15, 61, -16, 18, -36, -47, 13, 51, 24, -17, -3, -18, 32, 20, -79, -82, 18, 56, -26, -6, -4, 25, -9, -6, -5, -14, -18, 9, 0, -17, -1, -34, 18, 37, -20, 9, 16, -6, 12, 0, 25, -23, -19, 26, 21, -10, 11, -21, 8, 8, 40, 6, -4, 30, 23, 24, -21, 3, -16, -15, 12, -10, -29, -3, -7, -47, -12, 0, 27, -29, 15, 15, 46, -25, 35, 18, -17, 49, 41, -22, -37, -31, 15, -21, 25, -3, -7, 15, 10, 19, 14, -33, -1, 14, -35, 12, -7, -48, -13, 14, -24, 11, -29, -25, -47, 18, 9, -8, -23, 29, 13, -7, -15, 25, -11, -31, -11, -73, -56, 23, 26, -21, -22, 34, 32, -36, -20, 6, 24, 44, -35, -51, 9, 1, 0, 17, 16, -4, -6, 9, -3, 9, -19, -5, 51, 5, -8, 10, 13, 0, 6, 3, 30, 11, -5, -4, 14, -36, -23, -12, 0, -13, -14, 18, 9, 26, -40, 17, 20, 6, 24, -7, 20, 3, -30, 6, -16, 33, -41, 5, -26, -53, 30, 8, 3, -5, 45, 15, 13, 32, 14, 6, 10, -9, -6, -3, -18, 9, -29, 27, -7, -31, 5, -7, 18, 13, -11, 49, -34, -7, -1, -7, 5, -38, -1, 19, -59, -41, -25, -37, 21, -15, 19, 53, 16, 22, -16, -10, 7, -91, 2, 5, -10, -72, 17, 8, 32, 16, -21, -55, -8, -17, 3, -5, 13, -7, -16, -8, 1, -13, -35, -5, -4, -18, -57, -11, 33, 43, -6, 14, -29, 41, 12, 15, 18, -13, 22, 34, 34, 28, 48, -24, 14, 40, -39, 45, -5, 36, -37, -15, 46, 33, 27, 15, 13, -3, 5, -12, 8, 45, -18, -7, -18, 12, 12, 1, 35, 27, -7, 11, -33, -13, 15, -3, 21, 11, -6, 33, -3, -22, 13, -21, 50, 22, -24, 49, -9, -18, 38, -39, -64, 29, -32, 42, 32, 0, 3, 49, -31, -35, -10, 7, 12, -47, -13, 22, 2, 24, -17, 43, -28, -93, 33, -2, -4, -20, 29, -60, 15, -58, -78, -50, 13, -1, 9, -76, -5, -48, 14, 47, -23, 5, -34, 4, -12, 15, -22, -27, -1, 41, -53, -18, 13, 22, -13, 45, 54, 39, -63, -1, 40, -4, 19, 4, 19, 26, 42, 17, -13, -1, -18, 16, 66, 42, -22, 22, 20, -13, 1, -22, 13, 18, 20, -46, 22, -4, -17, -12, 43, 26, 7, 18, -1, -49, -46, -35, 1, -17, -18, 18, 12, 58, 20, 14, 8, 16, 15, 9, 6, -6, 18, -11, -20, -12, 6, 35, 9, -19, 4, 42, 53, -13, 54, 23, 21, 28, 1, -46, 18, -73, -23, 22, 
  -2, 40, 4, 41, -16, 2, 3, 29, -6, -10, 63, 12, -21, -33, 40, 31, 15, 2, 7, 39, 45, -4, 29, 11, 27, -21, -31, 41, -28, 1, 21, 29, -53, -43, 5, -17, 18, -35, 61, 23, 27, 11, -3, -6, -31, 35, 28, -40, -44, -73, -24, 55, -11, -61, 22, 36, 45, -5, 28, -84, 42, -20, -47, 1, -26, -32, -21, -11, -5, -19, -32, 65, -39, 35, 28, -28, 1, 9, 4, -16, -38, 3, -11, 30, 24, -33, -41, 3, 25, 23, -10, 46, -4, 16, -40, -2, -32, -28, 25, -37, 18, -1, 42, -8, -14, 35, 10, -9, -30, 24, 13, 28, -10, -24, 9, 37, 44, 36, 46, 13, 73, 28, 10, -7, 1, -27, -1, -4, -4, 15, -1, 35, 5, 19, 16, 40, 2, 20, -3, -62, 18, 16, -15, 24, -33, -16, -5, -17, 0, 19, 50, 4, -5, 42, 75, -1, -21, 0, -36, -36, -30, 8, -15, 52, -16, 17, -47, 3, 35, -29, 23, -65, 15, -45, -64, 34, 4, -20, 32, -15, -6, -32, -11, 23, -39, 0, 37, -49, 1, -34, 2, -16, -13, -5, -15, 43, 62, -5, 25, -2, 40, 16, -6, 30, -24, -53, -54, -23, -29, -14, -3, -53, 34, 46, 21, 3, -16, 56, 0, -51, -24, -16, -38, 41, -6, 41, 9, 24, 31, 18, -13, 15, 1, 30, 68, 37, -4, 20, -2, 49, -10, 41, 14, 35, 26, -6, -14, 7, 40, 16, 13, -73, 14, -44, -3, 41, -46, 15, -12, -5, 11, -12, 7, 20, -1, 71, 8, 4, -27, -42, 1, -17, -34, -10, -21, 40, -2, -12, -33, 6, 34, -15, -33, 8, 24, -13, -23, 39, -26, -6, 18, -15, -5, -35, -19, 24, -24, 4, 63, -30, -25, 21, 1, -14, -31, -23, -22, 49, -11, 0, -26, 15, 52, 5, -41, 35, -20, 44, -6, -17, -39, 14, 23, -10, 0, 7, -2, 1, 4, 7, -17, -17, -22, -50, -25, 57, 15, 52, -19, 31, 16, 11, -13, 38, 20, 2, 16, 3, 19, 30, -11, 25, 9, 41, 7, 27, 38, -15, 4, 10, -8, -25, -32, -48, 15, -33, -4, 8, 7, -56, 11, 10, -45, -23, -2, -17, -12, 20, 32, -30, -40, -30, 37, -10, -22, 17, -19, 61, -70, -54, 26, -25, 12, 1, 1, -25, 18, 1, -18, 40, -22, -60, 15, 26, 42, -8, -31, 6, -37, -1, 24, -60, -33, 22, 5, 12, -37, -2, -5, 49, -24, -11, -32, -9, 26, 1, -21, -50, -3, -27, -11, 0, -19, 6, 26, -2, 61, -52, 0, 20, -40, 39, 18, 3, -46, -61, -54, 22, 11, -15, -32, 22, 18, 27, -6, 9, 54, 36, -36, -1, -21, 49, -20, 36, 18, 29, 1, 3, 50, 11, 17, -14, 16, 10, -4, -10, 18, -2, 13, 5, 36, -11, -13, 14, 45, -24, 15, 0, -11, 16, 10, -12, -14, -24, 0, 23, -5, -29, -17, 27, -38, -21, 6, -11, 1, -8, 51, -72, 4, -22, 12, 17, -12, -43, 25, -28, 33, 0, -37, 3, -19, 14, 18, 10, -18, 2, 14, -8, -4, 0, -25, 47, -9, -16, -15, 7, 33, 9, -53, 45, -2, -11, -20, -45, -6, 4, 10, -12, 2, 15, -17, -6, -10, 30, 2, 2, 28, -41, -33, 60, 11, 0, 22, 12, -10, 30, -3, -4, 1, 29, -15, -27, 19, -4, -12, 51, 21, 30, 2, 14, 13, 6, -18, 18, 14, -42, -17, -24, -1, -47, -26, 25, 3, -30, -58, -38, 38, -8, 10, 1, -5, -6, 28, -40, 1, 25, 12, 25, -10, -25, 2, 26, -24, -27, -17, 12, -23, -40, -10, -22, 2, -32, 15, 16, -52, -78, 14, 18, -20, -19, 31, 24, 29, 28, 28, -19, -3, -4, 38, -20, -26, -21, -5, 38, 67, -2, -25, 19, 7, 18, 9, 13, 5, -12, -15, -6, 7, 5, 19, -26, -37, 19, -49, 3, -35, 38, 26, 15, -15, -14, -29, 28, -3, 26, -16, -10, 14, 0, -13, 5, -32, 35, -61, -31, -4, -41, -4, 43, 21, 79, 37, -7, -8, -27, 26, -4, 8, -27, 11, -43, -1, -57, 36, 31, -3, -14, -30, -7, 49, -22, 29, 20, -2, 24, 27, -18, -21, -23, -10, 4, 14, -10, 7, 19, -18, -22, 35, -8, 1, 1, -8, -14, 4, -4, 48, -1, -13, 1, 29, 9, -17, -18, -9, 20, 29, 32, 51, 6, -12, -14, 9, -4, 1, 15, -8, 7, 53, 47, -7, -14, 44, 32, -56, 37, -38, 0, -28, 6, 14, -25, 21, -17, 45, 5, -35, -21, -8, 37, 51, -21, -18, -7, -22, 49, 1, 16, 10, 2, -1, 23, 29, -22, -17, 0, -11, 6, 4, 6, -25, 32, 13, -16, 2, -2, -35, -56, 7, -3, 3, -6, -17, -11, -16, -7, 12, 11, -4, -8, -31, -12, 26, -14, -42, -2, 19, 13, 1, 6, -19, 10, 16, 15, 32, -6, -2, 38, 11, -36, 24, -31, 8, -26, -45, -68, 29, 18, -3, 4, -16, -15, 46, 13, -33, -11, -22, 6, 15, 5, 24, -33, -13, -97, 10, -3, 0, 13, -25, 17, 5, -2, 11, 7, 5, 22, -35, 28, -40, -24, 11, 0, -12, 18, 17, -12, 7, 5, 33, -26, -23, 80, 10, 7, 6, -6, -36, 0, -2, 35, -19, 31, 21, 18, -25, -7, -12, 6, -41, -53, 10, 22, -35, 16, 11, 23, -19, -18, 13, -39, -11, 2, -12, -26, -14, -56, 4, -19, -1, 26, -4, -8, -33, 12, -2, -11, 21, -6, 12, -3, -8, -41, -11, 8, 26, -3, -2, 7, -23, 16, 6, 11, 43, -9, 31, -1, 12, -15, 25, -11, 55, -16, -15, -18, 39, 42, -7, -52, 5, 27, 28, 36, 18, -18, -1, -23, -25, 10, 28, -7, -5, 7, 5, 39, 8, 30, 18, -4, -50, 43, -2, 24, 5, -22, -23, -15, -12, 18, 1, 18, 12, 2, -4, -19, 8, 4, 5, -12, -30, 33, 13, 39, -65, 6, 29, -7, -18, -29, -8, -29, -56, -23, -10, 28, -47, 41, 24, -36, 7, -32, 20, -23, 31, -14, -31, 24, -45, -87, -5, -51, 12, -4, 5, 4, -56, 14, 53, 0, 31, 4, -27, -7, 53, -8, -10, -4, -22, -24, -16, 0, 5, 18, 2, 19, 38, -6, 16, -1, -25, -46, 22, -9, 15, -27, -8, -61, 27, 42, 21, -36, 23, 8, 27, 9, 15, -31, 5, -13, 6, 3, 0, 33, 19, 13, 6, 6, -7, 23, 36, 32, 48, -22, -15, 10, 4, 15, -62, 43, 11, 3, -1, 5, -42, -8, 9, 5, -9, 26, 16, -50, -39, 26, -6, -18, -68, 9, -4, 51, -13, 6, 29, -24, -58, -116, 17, 54, -62, 8, 18, 9, 12, -34, 76, 0, 0, 4, -40, -3, -26, -51, 0, 13, 6, -4, -2, 7, -31, -10, 38, -27, -19, 3, -31, -19, 11, 9, -13, 34, 9, -22, 13, -43, 19, 9, -8, 1, 0, 21, -22, 29, 3, -10, 19, 24, 43, 2, 2, 10, 32, 22, -23, -14, -2, 23, 9, 10, -50, -20, 8, -28, 5, 14, -24, 7, 3, 14, -3, 5, 26, -14, 16, 0, -15, 2, 29, -5, -1, 12, 22, 3, -30, -1, -54, -26, 23, 0, 18, -18, -6, 21, 0, -16, 30, -12, 30, 21, -22, -6, -3, 1, -21, -32, 6, -46, -2, -35, -1, 19, -37, -5, 10, 29, 3, -11, 50, 26, -13, 1, 0, -27, -23, 2, -23, 36, 14, -22, 7, -4, -47, -10, 63, 24, 29, 11, -4, -8, -28, 2, -21, 53, -7, 17, 27, -36, 7, -5, -26, -10, 3, 7, -16, 10, 22, -76, 13, 13, -18, 35, -6, -26, 31, 7, -24, -26, 14, 4, -4, 4, 40, -61, 18, -14, -13, 18, 16, -47, -18, 28, -48, -21, 49, -33, 16, 0, 47, -8, -3, -21, 27, -56, 6, -7, 16, -19, -16, -15, -10, 2, 2, -11, 16, 36, -37, 17, 36, -29, 21, -11, 20, -3, -61, -1, -36, -7, -28, -61, 2, -31, 5, 1, -5, 3, -7, 23, -20, 51, 47, 10, -30, -22, 30, -20, -34, -4, -40, -48, 6, -13, -15, -18, -39, 4, 34, 35, 7, 27, -10, 37, -58, -15, -9, 46, 8, 22, 12, 5, -5, 14, 20, -4, 91, 3, -3, 24, 27, -40, 33, 24, 18, 3, -1, 47, 29, -8, -4, -27, 18, 8, 18, 0, 79, -3, 4, -47, 8, 5, 5, -24, 16, 26, -33, -5, 3, -6, 18, -15, -4, 54, -9, 4, 35, -34, -12, -9, 21, -8, -17, 19, -35, 25, 2, -20, -18, 35, -7, 85, -2, -28, 22, -7, 7, -19, -38, 9, 3, -19, 9, -25, 18, 5, -14, -4, -10, 14, -7, -20, -31, 25, 20, -3, 30, -3, 29, -23, 12, -7, -45, -15, -12, -14, -24, 28, -41, 15, 30, -4, 6, 12, 12, 20, 6, -8, -19, 20, 8, 26, -20, -12, -23, -6, 6, -8, 15, 4, -23, 7, 23, -14, 56, 4, -5, 12, -16, 30, 7, 30, 20, 2, 2, 14, -5, -2, 5, -13, 17, -52, -27, 21, -3, -43, 20, -14, -20, 14, 13, 10, -8, -20, -27, 16, -30, -51, 51, 23, -6, -33, -43, 15, 3, 27, 14, -5, 3, -36, -8, 2, 19, 40, -9, -10, 23, 21, 4, -28, -22, -30, 6, -7, -39, -12, 20, -3, 11, -31, 55, 41, 6, -51, 13, 43, 3, -21, 38, -1, 23, -24, 16, 23, -43, -40, 4, -35, -39, -20, -10, 35, 15, -7, -30, -1, 43, 37, -2, 5, 23, -17, -32, 16, -28, -15, -25, -3, 19, 17, -14, -15, -8, -10, 9, -51, 33, 12, 23, 27, -29, 20, 12, 21, 10, -17, 21, 8, 6, 37, 9, 26, 7, -15, 46, 13, -10, 24, 30, 35, -41, -4, 0, 1, -10, 31, 8, 54, -44, -83, 16, -22, 36, 7, 2, -12, -16, -22, 11, 7, -2, -48, -36, 34, 26, -47, 3, 33, 21, 0, -8, 17, 14, -22, -1, -42, 14, -62, -26, 14, 11, 24, 5, 8, -42, -67, 31, 19, 21, -36, 32, 18, 0, 29, 5, -54, -48, 2, 24, -15, -22, -22, -38, 17, 49, -17, -55, 22, 4, 37, -18, -17, 1, -39, -53, 6, -14, -7, -34, 32, 4, -29, 45, 11, -17, 3, -1, -57, 46, -29, 5, 12, -43, -36, 4, 37, 10, -29, 1, -3, 7, 14, 15, -41, -7, 13, -26, -18, -2, -36, 19, 74, -21, 10, -5, 25, 4, -6, -3, -15, -20, 19, -3, 28, -28, -31, -5, 49, -42, -6, 20, 6, 13, -15, 22, 8, 19, -2, 1, -23, -9, -10, -4, 29, 12, 13, -15, -4, 13, -66, -37, -20, 28, 20, -17, -10, -28, -51, 29, 5, -6, -37, 9, -6, -45, 19, -6, 13, -21, 2, 34, -30, -16, -56, -41, -5, -9, 24, -5, 20, 3, 40, -42, 38, -4, 43, -58, 23, 15, -36, -57, 51, -4, 24, 11, 15, -4, 39, -28, -12, 38, -24, 43, 13, -19, 18, 18, 27, -3, -8, 8, -5, 9, 32, 11, -41, 7, 25, -29, 36, -24, 17, 28, 36, 15, 7, 5, 16, 26, 12, 46, 23, 0, -50, 15, 8, -26, -5, -28, 29, 2, -34, 46, -7, 9, 9, 6, 33, -7, -14, 42, 8, 5, -13, 0, 1, -3, -39, -10, -9, 28, -39, -8, -34, 17, 9, -22, -21, -55, -78, 13, 45, 34, -45, -31, 21, 8, 34, 26, -8, -54, 12, -8, -13, -18, -2, -29, 16, -3, -17, 10, 37, 13, 47, 33, 2, -8, -41, -38, 33, -5, -34, -27, 64, 10, -51, 17, 18, 16, 21, 13, -80, 36, -66, 38, 10, -6, 23, 3, 14, 10, -39, 7, 24, 34, 14, 6, -41, -7, -23, -30, 51, -32, 27, 44, 36, 10, 3, 15, 7, -3, 53, -28, -22, 23, -12, 16, 1, -32, 8, -16, 25, -74, -33, 56, 37, 29, 5, 6, -19, -3, -30, -25, 35, -18, -47, -6, 5, -10, -9, 1, -11, 15, -25, 15, 37, 6, -2, 8, -24, -45, -65, 16, 33, 11, -1, 25, 20, 25, 13, 16, -46, -6, 6, 1, -61, 17, -26, -32, 12, -4, -9, 6, -9, -4, 42, 22, -86, -6, 19, -52, 16, -8, -22, -42, 25, -7, -26, -5, -26, 15, 6, 0, -37, 19, -15, 45, 1, -21, -16, -21, 14, -1, -25, 22, 11, 37, 8, -20, 5, 10, 21, -55, 20, -25, -13, -6, 20, -43, -15, -6, 6, -3, 49, 30, 28, 10, -52, 19, -15, -7, -1, -38, 54, -15, 12, -13, -21, 23, 8, -14, 0, 3, -117, -65, -4, -40, -28, -24, -7, 5, -11, -5, -8, 21, -25, -34, 43, -8, 20, 2, -37, -20, -82, -24, 2, -12, 2, -17, -18, -3, -36, 31, 13, -29, -6, -19, -14, -16, -8, 5, 7, 17, 18, -65, 6, -12, 22, -18, -24, -18, -41, -74, 42, -12, -29, -12, 34, -44, -8, 23, -10, -4, 7, 2, -101, 12, -15, 4, 18, -29, 16, -13, 6, 19, -9, 53, -15, 22, -24, -2, -48, 7, -21, 12, -2, -46, 3, -30, 49, 13, -3, 33, -21, 26, 51, 9, 20, -72, -11, 2, 17, -57, -20, -18, 50, -33, -40, -30, 18, 9, -4, 19, -18, -24, -21, -24, 1, -17, -41, -18, -38, 10, -2, 15, -2, -16, -47, 0, -13, -26, -15, -21, -26, -35, -33, -24, 18, 6, -30, -4, -28, -22, 0, -7, -9, -34, -53, -35, -31, -22, -14, -27, 10, 36, -8, 0, -4, -28, 23, -34, -35, 5, 4, -38, -23, -13, 7, -2, 17, -25, -66, 8, -22, -31, -9, 53, -38, 51, -36, -12, 28, 0, 25, 0, 13, -21, -7, 13, 5, 17, -10, -3, -73, -2, -39, -4, 5, -27, 24, 17, 1, 17, -28, 17, 1, 32, 6, 26, -24, -71, -59, 4, 0, -50, -8, -48, 39, 49, -21, 14, 10, 23, 9, -21, -36, 26, -44, -51, -29, 12, -19, -33, -39, -17, -28, 37, -10, -9, -39, -35, -12, -16, 1, 44, -58, -57, -1, -50, 27, 20, -48, 10, 12, 21, 0, -28, 13, -31, -14, -12, -46, -21, -19, -28, 14, -5, -40, -21, -27, -30, 36, -61, -40, -13, -8, -52, 5, -32, -50, -15, 11, -31, -60, 6, -18, -65, 9, 24, -63, 56, -37, -3, 47, -34, -4, -15, -5, -33, -65, -19, 3, -6, -54, -34, -38, 7, -39, -52, 14, -46, -26, -16, 65, -10, -21, 40, -24, 14, 7, -2, 48, -30, -41, -7, -23, -25, -17, -13, 12, 19, 6, -3, 7, 35, 10, -31, 0, -7, -16, -46, 11, -16, -23, -22, -2, -32, -24, 31, -29, -55, -30, -11, 29, -31, -31, 19, -42, -35, -45, -4, 31, 9, -27, 14, -6, 21, -3, -15, 5, -86, -53, -31, -38, -37, -60, -56, 12, -20, 12, -26, 0, 31, 20, -38, -19, 1, 10, -39, -12, -25, -69, -11, 17, -34, -12, 14, -15, -13, 7, 24, -44, 34, -57, -24, 45, -23, -31, -16, 3, -52, -67, -28, -22, -4, -30, 37, -47, 2, -27, -19, 30, -34, 10, 14, 11, 8, -18, 41, -8, 44, 17, -1, 7, -36, -42, -7, -9, -26, 17, -27, 2, 1, -21, 3, -8, 13, 41, -35, -88, -31, -48, -46, 19, 4, -52, 21, -17, -48, -41, 8, -5, -4, -38, 20, 45, 9, 12, 20, -37, -58, -45, 39, 26, -52, -13, -45, -18, 28, 13, -19, 28, -52, -45, 4, -51, -41, -37, -44, 17, 13, -3, -38, -16, -34, 5, -13, -35, -13, -29, -56, -4, -42, 5, 26, -18, -46, -32, -18, -23, -48, 0, -16, -110, 57, -41, -24, 45, -16, -4, 22, -17, -70, -62, -9, -17, -13, -24, 47, -22, -41, -54, 4, 6, -46, -14, -14, 43, -25, -25, -43, -14, 67, -5, -30, 22, -34, -21, 35, -48, -36, -31, -29, 5, -27, 20, -58, -19, -2, 10, -20, -11, -54, 10, -40, -12, -38, -34, 41, -33, -52, -44, 2, -15, -15, 19, -26, 68, -11, -5, 6, -49, -26, -30, -11, 6, -80, -8, -2, 16, 21, 6, -33, 77, -75, -60, -10, -56, -11, -39, -36, -35, -33, -19, -15, -31, -24, -2, 0, -75, -3, -10, -68, -34, -12, 1, 31, -29, -23, -45, -49, -22, -38, 17, -4, -127, 32, -11, -32, 40, -11, -44, 14, -5, -73, -51, -37, -4, 4, -6, 8, -48, -56, -7, -28, 9, -19, -28, -46, 11, -68, -39, 31, -50, 2, 9, -47, -73, -51, -9, 0, -38, 15, 10, -40, -47, -85, -28, -50, -25, -8, -25, -19, -7, -45, -54, -50, -7, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 3,2800 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0031385265756398439, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[16] = { -821, -349, -1648, 374, 191, 430, -1112, -1068, 51, 220, -260, 473, -201, 226, -1155, -591, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 3.227636989322491e-05, 4.6085420763120055e-05, 6.1151287809479982e-05, 5.1685088692465797e-05, 4.5821434468962252e-05, 4.1304610931547359e-05, 5.1497871027095243e-05, 5.1064092986052856e-05, 4.3561307393247262e-05, 4.8312376748071983e-05, 5.3372910770121962e-05, 4.6390810894081369e-05, 4.4180051190778613e-05, 4.4445576349971816e-05, 4.3479169107740745e-05, 4.2291158024454489e-05, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[16*3*3*8] = { 
  /* [0][0][][] */ -3,50,67,124,-63,-7,2,39, -22,34,14,-31,-91,5,97,-76, 18,58,-14,53,-104,-66,92,23, 
  /* [0][1][][] */ -23,22,78,97,40,24,44,-79, -31,-3,41,8,-127,-10,101,-89, -11,119,91,61,62,72,37,-79, 
  /* [0][2][][] */ -123,92,-120,-17,-61,60,103,19, 58,75,-22,-36,-100,18,-12,-68, 77,60,51,15,-18,-47,85,-5, 
  /* [1][0][][] */ -102,45,-11,44,-75,-65,-24,42, -69,-30,-13,42,51,127,88,83, 90,31,24,-97,-94,-31,75,-21, 
  /* [1][1][][] */ 22,-27,66,23,-101,-78,74,-39, -7,86,81,44,-30,53,55,-88, 71,91,-31,-35,-50,77,-87,6, 
  /* [1][2][][] */ -60,-58,63,-56,45,46,-30,-49, -47,-49,-9,17,-13,59,28,-52, -32,-9,13,22,-59,-28,-62,-53, 
  /* [2][0][][] */ -74,-10,-46,-30,-30,-18,-31,42, 61,-11,35,-16,55,2,8,15, -35,20,-3,-64,-81,-14,-1,-80, 
  /* [2][1][][] */ 5,25,-53,-17,-115,30,14,60, 9,70,28,-42,68,13,-1,-70, 19,-42,35,-18,22,-22,-3,-127, 
  /* [2][2][][] */ -4,-13,-43,-16,-85,2,-42,-1, -61,52,52,23,76,43,32,36, 16,-3,-34,-36,-60,-43,-37,-91, 
  /* [3][0][][] */ 85,-74,22,-102,84,-64,-44,37, 1,-84,-45,25,-5,7,-73,53, -17,-21,0,-54,49,-4,-1,9, 
  /* [3][1][][] */ 79,-62,13,-89,41,-50,-31,27, -33,-26,-89,-46,-35,34,-42,66, -39,-18,52,-17,-5,-25,27,40, 
  /* [3][2][][] */ 63,10,34,-95,62,-54,29,-13, -82,-52,-56,-27,-41,-34,-78,51, -51,-42,32,-127,33,-54,-12,12, 
  /* [4][0][][] */ -58,-62,-82,-64,-73,-28,69,53, -30,-62,31,-65,-6,38,78,31, 6,5,47,-43,-14,55,-52,55, 
  /* [4][1][][] */ -42,-61,13,5,-49,76,102,-46, 32,43,50,14,-91,127,-29,55, -81,-41,-25,15,95,70,53,73, 
  /* [4][2][][] */ -98,-65,-84,35,-126,15,-11,-89, -19,-16,-50,40,-52,-13,-83,56, -69,33,-96,-57,55,-24,-61,73, 
  /* [5][0][][] */ -57,105,25,38,9,-90,-4,4, -113,87,-63,18,51,80,-48,-27, -23,74,48,80,-26,-10,-32,49, 
  /* [5][1][][] */ -45,80,23,98,20,-4,-21,-127, -80,90,-1,115,25,49,93,43, 52,57,-2,47,-74,8,68,22, 
  /* [5][2][][] */ -23,42,-83,72,-71,58,-37,-14, 10,35,-67,69,-1,-113,61,-76, 67,32,-2,69,-14,14,-3,-59, 
  /* [6][0][][] */ 49,-29,36,54,-81,10,7,14, 36,-102,19,-17,-18,11,-65,46, -51,-62,-53,55,-23,-23,-62,-64, 
  /* [6][1][][] */ -46,4,70,21,-74,-10,-58,2, 85,-27,-56,-40,46,38,1,56, 8,40,40,-106,1,0,18,41, 
  /* [6][2][][] */ 38,-110,35,-127,-57,-34,13,-6, 77,-47,-17,-127,58,10,-30,118, -80,-78,54,43,-6,2,10,-59, 
  /* [7][0][][] */ -45,50,-27,-104,-61,-5,53,-7, -19,92,12,72,48,31,1,-8, 3,38,-79,-30,61,27,8,-19, 
  /* [7][1][][] */ 4,66,-15,-65,30,-96,-3,25, -49,35,3,62,-12,21,47,24, -30,-19,-26,35,-1,-77,-66,68, 
  /* [7][2][][] */ -75,-64,-34,-3,-34,-127,-29,31, -26,-63,9,13,84,-46,-58,28, -55,5,-26,-64,-47,-31,35,20, 
  /* [8][0][][] */ 64,-106,35,-23,5,-42,33,-13, -27,-69,-65,2,32,4,-127,79, -57,-21,51,42,40,34,-64,58, 
  /* [8][1][][] */ 69,-111,73,-64,16,-114,31,-70, -18,9,-42,-30,-2,48,-86,7, -79,-82,-31,-71,53,28,65,87, 
  /* [8][2][][] */ 41,-112,60,-66,38,-26,1,-91, 31,-56,22,-34,20,-69,-118,26, 3,-28,-36,-41,10,-18,3,15, 
  /* [9][0][][] */ -25,1,-28,42,-78,81,-19,18, -64,-61,-6,5,23,56,-98,29, -50,-73,-67,56,-45,53,-86,30, 
  /* [9][1][][] */ -64,85,-126,-87,-89,42,-91,23, 5,-63,104,-98,60,63,-23,-1, -41,-19,39,5,1,23,7,-49, 
  /* [9][2][][] */ -115,127,-88,1,7,-4,-72,7, 21,-102,45,16,-25,22,-9,92, 5,-67,-47,-11,39,74,-43,5, 
  /* [10][0][][] */ -88,-90,-64,-21,-17,7,8,20, -60,-60,4,1,-23,-54,-58,-39, -15,15,-127,22,-58,60,-16,32, 
  /* [10][1][][] */ -38,-15,-34,22,-8,71,31,83, 77,-113,78,-33,-22,-96,50,21, -23,75,-85,11,32,13,-77,-27, 
  /* [10][2][][] */ 15,-30,-24,48,-4,-2,39,3, -47,11,62,15,12,74,-66,5, -27,2,-42,28,-39,-8,57,-101, 
  /* [11][0][][] */ -72,90,-50,54,73,22,-102,-99, -49,25,3,45,74,-56,-17,-16, -7,32,-61,77,-96,-77,-67,-2, 
  /* [11][1][][] */ 68,73,39,-127,69,-39,3,-108, -45,117,-45,-26,43,23,-71,-125, -56,-3,-32,-14,-47,53,34,-33, 
  /* [11][2][][] */ -18,25,64,104,77,-34,-59,-18, 26,0,31,43,19,58,-40,-28, -64,-103,-75,50,-105,16,58,6, 
  /* [12][0][][] */ -50,73,-53,118,-42,-10,81,-21, 33,-38,-36,-33,-53,96,-49,49, 58,60,80,-30,103,-87,-54,-22, 
  /* [12][1][][] */ -19,-60,-20,-62,2,-1,44,41, 7,-34,-50,-16,34,-61,-31,27, 5,-29,84,-93,37,-46,20,22, 
  /* [12][2][][] */ 19,-65,-41,-127,-27,-65,-26,33, -67,-117,-35,1,2,-31,-26,-64, 38,-22,62,-50,43,-40,-45,-47, 
  /* [13][0][][] */ 14,1,1,-11,-87,48,3,-68, -22,63,-11,59,-71,-64,-22,-72, 7,28,114,68,78,-86,-49,34, 
  /* [13][1][][] */ -12,78,-14,-106,21,-33,35,-12, -68,20,-124,-84,-70,77,89,83, -56,-127,36,-77,42,-32,102,65, 
  /* [13][2][][] */ -24,43,-47,108,-114,-63,-60,-59, 59,7,57,11,37,-60,-17,-55, -41,113,-40,12,-24,10,-16,41, 
  /* [14][0][][] */ 18,22,60,-14,-24,50,-2,-27, 22,78,69,-11,-30,-41,38,-95, 54,-59,19,127,-61,-61,-25,-93, 
  /* [14][1][][] */ 60,-26,1,-55,-90,127,73,-31, 103,110,38,-47,57,-34,105,-4, -94,47,-62,-71,-6,77,-59,44, 
  /* [14][2][][] */ -85,64,-4,37,-80,92,-97,-60, -7,17,-26,-83,70,-64,0,-60, -15,47,-1,25,-36,79,7,3, 
  /* [15][0][][] */ -7,-47,-24,-75,-30,3,-60,124, -86,-70,73,-59,27,50,52,62, 9,-48,50,-74,-112,-14,43,4, 
  /* [15][1][][] */ 36,-119,53,-30,-44,68,-65,72, -78,-108,55,25,-95,127,19,72, 80,19,92,-75,38,34,-25,4, 
  /* [15][2][][] */ -54,-66,-6,-12,-64,-114,30,95, -29,-45,94,89,45,-26,-86,26, 64,-32,82,-29,-89,16,-34,34, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0019780222792178392, 0.0028242948465049267, 0.0037475903518497944, 0.0031674643978476524, 0.0028081168420612812, 0.0025313082151114941, 0.003155990969389677, 0.0031294072978198528, 0.0026696072891354561, 0.0029607715550810099, 0.0032709008082747459, 0.0028430104721337557, 0.0027075263205915689, 0.0027237988542765379, 0.0026645734906196594, 0.002591767581179738, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[8] = { -39, -147, 183, 74, 374, -873, -194, -643, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00021090952213853598, 0.00017611711518839002, 0.00014978046237956733, 0.00019522287766449153, 0.0001830190303735435, 0.00011538646504050121, 0.00016786069318186492, 0.00010412003030069172, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ 4, 5, -3, 
  /* [0][1][][] */ -3, -127, -46, 
  /* [0][2][][] */ 24, -60, -67, 
  /* [1][0][][] */ -94, -84, -16, 
  /* [1][1][][] */ 108, -119, 87, 
  /* [1][2][][] */ -33, 127, -9, 
  /* [2][0][][] */ 73, 85, -92, 
  /* [2][1][][] */ -8, -127, -99, 
  /* [2][2][][] */ 68, 73, -59, 
  /* [3][0][][] */ -59, -11, -13, 
  /* [3][1][][] */ -105, 54, -89, 
  /* [3][2][][] */ 127, 14, 68, 
  /* [4][0][][] */ 105, -71, -21, 
  /* [4][1][][] */ 127, -82, 18, 
  /* [4][2][][] */ 41, 33, -4, 
  /* [5][0][][] */ -126, 18, -42, 
  /* [5][1][][] */ 90, 127, 24, 
  /* [5][2][][] */ -119, 38, -6, 
  /* [6][0][][] */ 57, 127, 72, 
  /* [6][1][][] */ 28, -8, -33, 
  /* [6][2][][] */ -57, -94, -67, 
  /* [7][0][][] */ 78, 69, 118, 
  /* [7][1][][] */ 75, 127, 88, 
  /* [7][2][][] */ -66, 126, 14, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0046802866272628307, 0.003908209502696991, 0.0033237736206501722, 0.0043321847915649414, 0.0040613696910440922, 0.0025605375412851572, 0.0037249913439154625, 0.0023105244617909193, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,50,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.045063376426696777, } };
const TfArray<1, int> quant9_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,25,7,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.016317496076226234, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.021128213033080101, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,2800 } };
const TfArray<1, float> quant12_scale = { 1, { 0.021128213033080101, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,3 } };
const TfArray<1, float> quant13_scale = { 1, { 0.13361850380897522, } };
const TfArray<1, int> quant13_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,3 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 10,6,5 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteReshapeParams opdata3 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs3 = { 2, { 11,2 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata4 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs4 = { 3, { 12,4,3 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata5 = { 1 };
const TfArray<1, int> inputs5 = { 1, { 13 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 8400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1408), (TfLiteIntArray*)&g0::tensor_dimension9, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2800), (TfLiteIntArray*)&g0::tensor_dimension11, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2800), (TfLiteIntArray*)&g0::tensor_dimension13, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[6] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[6] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_CONV_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 15, };
const size_t tflNodes_subgraph_index[] = {0, 6, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  14, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 15;
  for (size_t i = 0; i < 15; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 6; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
